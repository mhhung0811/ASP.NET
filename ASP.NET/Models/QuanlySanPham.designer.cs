#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BaiTap4___NET.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QUANLYSANPHAMBAI4")]
	public partial class QuanlySanPhamDataContext : System.Data.Linq.DataContext
	{
		private string connectionString = "Data Source=MSI;Initial Catalog=QUANLYSANPHAMBAI4;Integrated Security=True;Encrypt=True;Trust Server Certificate=True";

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCATALOG(CATALOG instance);
    partial void UpdateCATALOG(CATALOG instance);
    partial void DeleteCATALOG(CATALOG instance);
    partial void InsertPRODUCT(PRODUCT instance);
    partial void UpdatePRODUCT(PRODUCT instance);
    partial void DeletePRODUCT(PRODUCT instance);
        #endregion
       
        public QuanlySanPhamDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanlySanPhamDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanlySanPhamDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanlySanPhamDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}

        public System.Data.Linq.Table<CATALOG> CATALOGs
		{
			get
			{
				return this.GetTable<CATALOG>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCT> PRODUCTs
		{
			get
			{
				return this.GetTable<PRODUCT>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CATALOG")]
	public partial class CATALOG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CATALOGCODE;
		
		private string _CATALOGNAME;
		
		private EntitySet<PRODUCT> _PRODUCTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCATALOGCODEChanging(string value);
    partial void OnCATALOGCODEChanged();
    partial void OnCATALOGNAMEChanging(string value);
    partial void OnCATALOGNAMEChanged();
    #endregion
		
		public CATALOG()
		{
			this._PRODUCTs = new EntitySet<PRODUCT>(new Action<PRODUCT>(this.attach_PRODUCTs), new Action<PRODUCT>(this.detach_PRODUCTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATALOGCODE", DbType="NVarChar(50)")]
		public string CATALOGCODE
		{
			get
			{
				return this._CATALOGCODE;
			}
			set
			{
				if ((this._CATALOGCODE != value))
				{
					this.OnCATALOGCODEChanging(value);
					this.SendPropertyChanging();
					this._CATALOGCODE = value;
					this.SendPropertyChanged("CATALOGCODE");
					this.OnCATALOGCODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATALOGNAME", DbType="NVarChar(250)")]
		public string CATALOGNAME
		{
			get
			{
				return this._CATALOGNAME;
			}
			set
			{
				if ((this._CATALOGNAME != value))
				{
					this.OnCATALOGNAMEChanging(value);
					this.SendPropertyChanging();
					this._CATALOGNAME = value;
					this.SendPropertyChanged("CATALOGNAME");
					this.OnCATALOGNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATALOG_PRODUCT", Storage="_PRODUCTs", ThisKey="ID", OtherKey="CATALOGID")]
		public EntitySet<PRODUCT> PRODUCTs
		{
			get
			{
				return this._PRODUCTs;
			}
			set
			{
				this._PRODUCTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.CATALOG = this;
		}
		
		private void detach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.CATALOG = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCT")]
	public partial class PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CATALOGID;
		
		private string _PRODUCTCODE;
		
		private string _PRODUCTNAME;
		
		private string _PICTURE;
		
		private System.Nullable<double> _UNITPRICE;
		
		private EntityRef<CATALOG> _CATALOG;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCATALOGIDChanging(System.Nullable<int> value);
    partial void OnCATALOGIDChanged();
    partial void OnPRODUCTCODEChanging(string value);
    partial void OnPRODUCTCODEChanged();
    partial void OnPRODUCTNAMEChanging(string value);
    partial void OnPRODUCTNAMEChanged();
    partial void OnPICTUREChanging(string value);
    partial void OnPICTUREChanged();
    partial void OnUNITPRICEChanging(System.Nullable<double> value);
    partial void OnUNITPRICEChanged();
    #endregion
		
		public PRODUCT()
		{
			this._CATALOG = default(EntityRef<CATALOG>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATALOGID", DbType="Int")]
		public System.Nullable<int> CATALOGID
		{
			get
			{
				return this._CATALOGID;
			}
			set
			{
				if ((this._CATALOGID != value))
				{
					if (this._CATALOG.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCATALOGIDChanging(value);
					this.SendPropertyChanging();
					this._CATALOGID = value;
					this.SendPropertyChanged("CATALOGID");
					this.OnCATALOGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTCODE", DbType="NVarChar(50)")]
		public string PRODUCTCODE
		{
			get
			{
				return this._PRODUCTCODE;
			}
			set
			{
				if ((this._PRODUCTCODE != value))
				{
					this.OnPRODUCTCODEChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTCODE = value;
					this.SendPropertyChanged("PRODUCTCODE");
					this.OnPRODUCTCODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTNAME", DbType="NVarChar(250)")]
		public string PRODUCTNAME
		{
			get
			{
				return this._PRODUCTNAME;
			}
			set
			{
				if ((this._PRODUCTNAME != value))
				{
					this.OnPRODUCTNAMEChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTNAME = value;
					this.SendPropertyChanged("PRODUCTNAME");
					this.OnPRODUCTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PICTURE", DbType="NVarChar(MAX)")]
		public string PICTURE
		{
			get
			{
				return this._PICTURE;
			}
			set
			{
				if ((this._PICTURE != value))
				{
					this.OnPICTUREChanging(value);
					this.SendPropertyChanging();
					this._PICTURE = value;
					this.SendPropertyChanged("PICTURE");
					this.OnPICTUREChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UNITPRICE", DbType="Float")]
		public System.Nullable<double> UNITPRICE
		{
			get
			{
				return this._UNITPRICE;
			}
			set
			{
				if ((this._UNITPRICE != value))
				{
					this.OnUNITPRICEChanging(value);
					this.SendPropertyChanging();
					this._UNITPRICE = value;
					this.SendPropertyChanged("UNITPRICE");
					this.OnUNITPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATALOG_PRODUCT", Storage="_CATALOG", ThisKey="CATALOGID", OtherKey="ID", IsForeignKey=true)]
		public CATALOG CATALOG
		{
			get
			{
				return this._CATALOG.Entity;
			}
			set
			{
				CATALOG previousValue = this._CATALOG.Entity;
				if (((previousValue != value) 
							|| (this._CATALOG.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CATALOG.Entity = null;
						previousValue.PRODUCTs.Remove(this);
					}
					this._CATALOG.Entity = value;
					if ((value != null))
					{
						value.PRODUCTs.Add(this);
						this._CATALOGID = value.ID;
					}
					else
					{
						this._CATALOGID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CATALOG");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
